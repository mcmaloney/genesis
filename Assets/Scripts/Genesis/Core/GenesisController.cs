using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Mapbox.Unity.MeshGeneration;
using Mapbox.Utils;
using Genesis.Generators;
using Genesis.UI;

namespace Genesis.Core
{
    public class GenesisController : MonoBehaviour
    {
        public GameObject MapBoxServer;
        public GameObject GenesisFeatureGenerator;
        public GameObject GenesisSearchMap;
        public Vector2d OriginPoint; // World coordinates of center of center tile generated by MapBoxServer
        public float WorldScale;
        public Vector2d mapOrigin; // Where Genesis should build the world
        public int zoom;
        public Vector4 range;
        public string worldObjectName; // The name of the root object from the Mapbox server

        private MapController mapboxServerController;
        private FeatureGenerator genesisFeatureGenerator;
        private SearchMap searchMapController;
        private bool hasWorld;

        [ContextMenu("Test Build World")]
        private void TestBuildWorld()
        {
            Vector2d origin = new Vector2d(-73.988712, 40.748508);
            Awake();
            BuildWorld(origin);
        }

        private void Awake()
        {
            searchMapController = GenesisSearchMap.GetComponent<SearchMap>();
            mapboxServerController = MapBoxServer.GetComponent<MapController>();
            hasWorld = false;
        }

        private void Update()
        {
            if (searchMapController.HasResponse)
            {
                mapOrigin = new Vector2d(searchMapController.Coordinate.y, searchMapController.Coordinate.x);

                Debug.Log("Geocoded map origin: " + mapOrigin);
                BuildWorld(mapOrigin);
                searchMapController.HasResponse = false;
            }
        }

        private void BuildWorld(Vector2d originCoorindates)
        {
            if (hasWorld)
            {
                DestroyWorld();
            }

            genesisFeatureGenerator = GenesisFeatureGenerator.GetComponent<FeatureGenerator>();
            mapboxServerController.BuildTiles(originCoorindates, zoom, range, worldObjectName);

            OriginPoint = mapboxServerController.RootTileOrigin; // One root tile to rule them all
            Debug.Log("Origin: " + OriginPoint);
            
            WorldScale = MapController.WorldScaleFactor; // One world scale multiplier to rule them all
            Debug.Log("Scale factor: " + WorldScale);
            hasWorld = true;

            // These calls to build things should be handled by GeoJSON parsers but just testing now
            genesisFeatureGenerator.buildGeoPoint(OriginPoint, WorldScale);
            genesisFeatureGenerator.buildGeoPolygon(OriginPoint, WorldScale);
            genesisFeatureGenerator.buildGeoLine(OriginPoint, WorldScale);
        }

        private void DestroyWorld()
        {
            GameObject world = GameObject.Find(worldObjectName);
            Destroy(world);
            hasWorld = false;
        }
    }
}
